{"version":3,"file":"static/js/465.fa502088.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.jsx","page/Register/Register.jsx","../node_modules/yup-password/index.js"],"sourcesContent":["import { Form, Formik, Field, ErrorMessage } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { register } from '../../redux/auth/operations';\nimport * as yup from 'yup';\nimport YupPassword from 'yup-password';\nYupPassword(yup);\n\nconst schema = yup.object().shape({\n  name: yup.string().required(),\n  email: yup.string().email(),\n  password: yup\n    .string()\n    .required()\n    .minLowercase(1)\n    .minUppercase(1)\n    .minNumbers(1)\n    .minSymbols()\n    .min(8),\n});\n\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (value, { resetForm }) => {\n    console.log(value);\n    dispatch(register(value));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={schema}\n    >\n      <Form\n        // autoComplete=\"off\"\n        style={{\n          display: 'flex',\n          gap: '20px',\n          marginTop: '20px',\n        }}\n      >\n        <Field type=\"text\" name=\"name\" style={{ color: 'white' }} />\n        <ErrorMessage name=\"name\" />\n        <Field type=\"email\" name=\"email\" style={{ color: 'white' }} />\n        <ErrorMessage name=\"email\" />\n        <Field type=\"password\" name=\"password\" style={{ color: 'white' }} />\n        <ErrorMessage name=\"password\" />\n        <button type=\"submit\">Submit</button>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from '../../components/RegisterForm';\n\nconst Register = () => {\n  return (\n    <>\n      <h1>Register</h1>\n      <RegisterForm />\n    </>\n  );\n};\n\nexport default Register;\n","'use strict'\n\n// pluralize\nconst p = function (word, num) {\n    return num === 1 ? word : `${word}s`\n}\n\nconst isNullOrUndefined = function (value) {\n    return value === null || value === undefined\n}\n\nfunction minLowercase(length = 1, message) {\n    const msg = message || '${path} must contain at least ${length} lowercase ' + p('letter', length)\n    return this.test({\n        name: 'minLowercase',\n        exclusive: true,\n        message: msg,\n        params: { length },\n        test(value) {\n            return isNullOrUndefined(value) || (value.match(/[a-z]/g) || []).length >= length\n        }\n    })\n} // minLowercase()\n\nfunction minUppercase(length = 1, message) {\n    const msg = message || '${path} must contain at least ${length} uppercase ' + p('letter', length)\n    return this.test({\n        name: 'minUppercase',\n        exclusive: true,\n        message: msg,\n        params: { length },\n        test(value) {\n            return isNullOrUndefined(value) || (value.match(/[A-Z]/g) || []).length >= length\n        }\n    })\n} // minUppercase()\n\nfunction minNumbers(length = 1, message) {\n    const msg = message || '${path} must contain at least ${length} ' + p('number', length)\n    return this.test({\n        name: 'minNumber',\n        exclusive: true,\n        message: msg,\n        params: { length },\n        test(value) {\n            return isNullOrUndefined(value) || (value.match(/[0-9]/g) || []).length >= length\n        }\n    })\n} // minNumber()\n\nfunction minSymbols(length = 1, message) {\n    const msg = message || '${path} must contain at least ${length} ' + p('symbol', length)\n    return this.test({\n        name: 'minSymbol',\n        exclusive: true,\n        message: msg,\n        params: { length },\n        test(value) {\n            return isNullOrUndefined(value) || (value.match(/[^a-zA-Z0-9\\s]/g) || []).length >= length\n        }\n    })\n} // minSymbol()\n\nfunction minRepeating(length = 2, message) {\n    const msg = message || '${path} must not contain sequences of more than ${length} repeated ' + p('character', length)\n    return this.test({\n        name: 'minRepeating',\n        exclusive: true,\n        message: msg,\n        params: { length: length },\n        test(value) {\n            return isNullOrUndefined(value) || ! new RegExp(`(.)\\\\1{${length},}`).test(value)\n        }\n    })\n} // minRepeating()\n\nfunction minWords(length = 2, message) {\n    const msg = message || '${path} must contain at least ${length} ' + p('word', length)\n    const rx = new RegExp('[a-zA-Z0-9]')\n    return this.test({\n        name: 'minWords',\n        exclusive: true,\n        message: msg,\n        params: { length: length },\n        test(value) {\n            return isNullOrUndefined(value) || value.split(' ').filter(v => !! v && rx.test(v)).length >= length\n        }\n    })\n} // minWords()\n\nfunction password() {\n    return this\n        .min(8)\n        .max(250)\n        .minLowercase(1)\n        .minUppercase(1)\n        .minNumbers(1)\n        .minSymbols(1)\n} // password()\n\nfunction setup(yup) {\n    yup.addMethod(yup.string, 'minLowercase', minLowercase)\n    yup.addMethod(yup.string, 'minUppercase', minUppercase)\n    yup.addMethod(yup.string, 'minNumber', minNumbers)\n    yup.addMethod(yup.string, 'minNumbers', minNumbers)\n    yup.addMethod(yup.string, 'minSymbol', minSymbols)\n    yup.addMethod(yup.string, 'minSymbols', minSymbols)\n    yup.addMethod(yup.string, 'minRepeating', minRepeating)\n    yup.addMethod(yup.string, 'minWords', minWords)\n    yup.addMethod(yup.string, 'password', password)\n}\n\nmodule.exports = setup\n"],"names":["YupPassword","yup","schema","shape","name","required","email","password","minLowercase","minUppercase","minNumbers","minSymbols","min","initialValues","dispatch","useDispatch","onSubmit","value","resetForm","console","log","register","validationSchema","style","display","gap","marginTop","type","color","p","word","num","isNullOrUndefined","undefined","length","message","msg","this","test","exclusive","params","match","minRepeating","RegExp","minWords","rx","split","filter","v","max","module","exports","addMethod","string"],"sourceRoot":""}